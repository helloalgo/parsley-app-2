// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExecutionContainerClient is the client API for ExecutionContainer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExecutionContainerClient interface {
	// Container state mutations
	SetFile(ctx context.Context, in *SetFileArgs, opts ...grpc.CallOption) (*SettingChangeResult, error)
	SetRunConfig(ctx context.Context, in *RunOptions, opts ...grpc.CallOption) (*SettingChangeResult, error)
	// Actions
	RunInteractive(ctx context.Context, opts ...grpc.CallOption) (ExecutionContainer_RunInteractiveClient, error)
	Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SettingChangeResult, error)
	Reset(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SettingChangeResult, error)
}

type executionContainerClient struct {
	cc grpc.ClientConnInterface
}

func NewExecutionContainerClient(cc grpc.ClientConnInterface) ExecutionContainerClient {
	return &executionContainerClient{cc}
}

func (c *executionContainerClient) SetFile(ctx context.Context, in *SetFileArgs, opts ...grpc.CallOption) (*SettingChangeResult, error) {
	out := new(SettingChangeResult)
	err := c.cc.Invoke(ctx, "/proto.ExecutionContainer/SetFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executionContainerClient) SetRunConfig(ctx context.Context, in *RunOptions, opts ...grpc.CallOption) (*SettingChangeResult, error) {
	out := new(SettingChangeResult)
	err := c.cc.Invoke(ctx, "/proto.ExecutionContainer/SetRunConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executionContainerClient) RunInteractive(ctx context.Context, opts ...grpc.CallOption) (ExecutionContainer_RunInteractiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExecutionContainer_ServiceDesc.Streams[0], "/proto.ExecutionContainer/RunInteractive", opts...)
	if err != nil {
		return nil, err
	}
	x := &executionContainerRunInteractiveClient{stream}
	return x, nil
}

type ExecutionContainer_RunInteractiveClient interface {
	Send(*RunInput) error
	Recv() (*RunOutput, error)
	grpc.ClientStream
}

type executionContainerRunInteractiveClient struct {
	grpc.ClientStream
}

func (x *executionContainerRunInteractiveClient) Send(m *RunInput) error {
	return x.ClientStream.SendMsg(m)
}

func (x *executionContainerRunInteractiveClient) Recv() (*RunOutput, error) {
	m := new(RunOutput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *executionContainerClient) Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SettingChangeResult, error) {
	out := new(SettingChangeResult)
	err := c.cc.Invoke(ctx, "/proto.ExecutionContainer/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executionContainerClient) Reset(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SettingChangeResult, error) {
	out := new(SettingChangeResult)
	err := c.cc.Invoke(ctx, "/proto.ExecutionContainer/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExecutionContainerServer is the server API for ExecutionContainer service.
// All implementations must embed UnimplementedExecutionContainerServer
// for forward compatibility
type ExecutionContainerServer interface {
	// Container state mutations
	SetFile(context.Context, *SetFileArgs) (*SettingChangeResult, error)
	SetRunConfig(context.Context, *RunOptions) (*SettingChangeResult, error)
	// Actions
	RunInteractive(ExecutionContainer_RunInteractiveServer) error
	Stop(context.Context, *Empty) (*SettingChangeResult, error)
	Reset(context.Context, *Empty) (*SettingChangeResult, error)
	mustEmbedUnimplementedExecutionContainerServer()
}

// UnimplementedExecutionContainerServer must be embedded to have forward compatible implementations.
type UnimplementedExecutionContainerServer struct {
}

func (UnimplementedExecutionContainerServer) SetFile(context.Context, *SetFileArgs) (*SettingChangeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFile not implemented")
}
func (UnimplementedExecutionContainerServer) SetRunConfig(context.Context, *RunOptions) (*SettingChangeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRunConfig not implemented")
}
func (UnimplementedExecutionContainerServer) RunInteractive(ExecutionContainer_RunInteractiveServer) error {
	return status.Errorf(codes.Unimplemented, "method RunInteractive not implemented")
}
func (UnimplementedExecutionContainerServer) Stop(context.Context, *Empty) (*SettingChangeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedExecutionContainerServer) Reset(context.Context, *Empty) (*SettingChangeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedExecutionContainerServer) mustEmbedUnimplementedExecutionContainerServer() {}

// UnsafeExecutionContainerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExecutionContainerServer will
// result in compilation errors.
type UnsafeExecutionContainerServer interface {
	mustEmbedUnimplementedExecutionContainerServer()
}

func RegisterExecutionContainerServer(s grpc.ServiceRegistrar, srv ExecutionContainerServer) {
	s.RegisterService(&ExecutionContainer_ServiceDesc, srv)
}

func _ExecutionContainer_SetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFileArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionContainerServer).SetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ExecutionContainer/SetFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionContainerServer).SetFile(ctx, req.(*SetFileArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutionContainer_SetRunConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionContainerServer).SetRunConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ExecutionContainer/SetRunConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionContainerServer).SetRunConfig(ctx, req.(*RunOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutionContainer_RunInteractive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExecutionContainerServer).RunInteractive(&executionContainerRunInteractiveServer{stream})
}

type ExecutionContainer_RunInteractiveServer interface {
	Send(*RunOutput) error
	Recv() (*RunInput, error)
	grpc.ServerStream
}

type executionContainerRunInteractiveServer struct {
	grpc.ServerStream
}

func (x *executionContainerRunInteractiveServer) Send(m *RunOutput) error {
	return x.ServerStream.SendMsg(m)
}

func (x *executionContainerRunInteractiveServer) Recv() (*RunInput, error) {
	m := new(RunInput)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ExecutionContainer_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionContainerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ExecutionContainer/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionContainerServer).Stop(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutionContainer_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionContainerServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ExecutionContainer/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionContainerServer).Reset(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ExecutionContainer_ServiceDesc is the grpc.ServiceDesc for ExecutionContainer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExecutionContainer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ExecutionContainer",
	HandlerType: (*ExecutionContainerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetFile",
			Handler:    _ExecutionContainer_SetFile_Handler,
		},
		{
			MethodName: "SetRunConfig",
			Handler:    _ExecutionContainer_SetRunConfig_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _ExecutionContainer_Stop_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _ExecutionContainer_Reset_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunInteractive",
			Handler:       _ExecutionContainer_RunInteractive_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "app.proto",
}
